# Dockerfile.frontend

# ====================================================================
# STAGE 1: base (Install Dependencies)
# ====================================================================
FROM node:lts-slim AS base

WORKDIR /app

# [FIX 1: Use pnpm-lock.yaml]
COPY package.json pnpm-lock.yaml ./
# NOTE: If you are using pnpm, you should also install pnpm and use 'pnpm install' here.
# Assuming 'npm install' can resolve the dependencies based on pnpm-lock.yaml for now.
RUN npm install --frozen-lockfile

# ====================================================================
# STAGE 2: builder (Build Next.js Application)
# ====================================================================
FROM node:lts-slim AS builder

WORKDIR /app
ENV NODE_ENV=production

COPY --from=base /app/node_modules ./node_modules
# [FIX 2: Assumes .dockerignore is in place to ignore local node_modules]
COPY . .

RUN npm run build

# ====================================================================
# STAGE 3: runner (Production Image)
# ====================================================================
FROM node:lts-slim AS runner

# Set UID
ARG UID=1001

# [FIX 3: Explicitly create group and user to resolve chown error]
RUN addgroup --system nextjs \
    && adduser --system --uid ${UID} --ingroup nextjs nextjs

WORKDIR /app

# Copy production files from builder stage
COPY --from=builder /app/public ./public
# NOTE: This assumes 'output: "standalone"' is set in next.config.js/ts
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

ENV PORT 3000
EXPOSE 3000

# Set ownership of the application directory to the non-root user
RUN chown -R nextjs:nextjs /app

# Switch to the non-root user
USER nextjs

CMD ["node", "server.js"]